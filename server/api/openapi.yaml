openapi: 3.0.3
info:
  contact:
    email: Simon.Schulz01@telekom.de
    name: Simon Schulz
  description: This is the REST api specification for the blockchain-adapter
  title: Blockchain-Adapter
  version: 0.1.1
servers:
- url: /
tags:
- description: Access to smartcontract data
  name: contract
- description: Access to configuration
  name: config
- description: Access to status information
  name: status
- description: Access to discovery information
  name: discovery
- description: Access to webhooks for event subscription
  name: webhook
paths:
  /discovery/msps:
    get:
      description: Show a list of all MSPs
      operationId: getDiscoveryMSPs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: A list of all discovered MSPs
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /discovery/msps/{mspid}:
    get:
      description: Show details for a specific MSP
      operationId: getDiscoveryMSP
      parameters:
      - description: Name of a MSP
        explode: false
        in: path
        name: mspid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: Details about the requested MSP
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /status:
    get:
      description: Show version information of the API
      operationId: getApiStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - status
      x-eov-operation-handler: controllers/StatusController
  /private-documents:
    get:
      description: show all private documents that are in the transient storage
      operationId: fetchPrivateDocumentReferenceIDs
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Successful operation, returns an array of referenceIDs of the
            stored documents
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    post:
      description: Upload a private document, shared between our own organization
        and a partner MSP
      operationId: uploadPrivateDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateDocument'
        description: A document that should be uploaded
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateDocumentResponse'
          description: Successful operation, returns the referenceID and the txID
            of the stored document
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /private-documents/{referenceID}:
    delete:
      description: Delete a private document from the database, identified by its
        referenceID
      operationId: deletePrivateDocument
      parameters:
      - description: The referenceID for the document to delete
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Successful deletion
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    get:
      description: Fetch a private document from the database, identified by its referenceID
      operationId: fetchPrivateDocument
      parameters:
      - description: The referenceID of the document
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateDocumentResponse'
          description: Successful operation, returns document
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /webhooks/subscribe:
    post:
      callbacks:
        onData:
          '{$request.query.callbackUrl}':
            post:
              operationId: onData_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SubscriptionPayload'
                description: subscription payload
              responses:
                "202":
                  description: the app should return this when the data was received
                    successfully
                "204":
                  description: the app should return this when it is no longer interested
                    in further updates
              x-callback-request: true
      description: subscribes a client to receive the specified event
      operationId: webhooksSubscribePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        description: A document that should be uploaded
      responses:
        "201":
          content:
            text/plain:
              schema:
                description: The unique identifier of the associated subscription
                  (subscriptionID)
                example: 2531329f-fb09-4ef7-887e-84e648214436
                type: string
          description: Subscription successfully created
        "500":
          content: {}
          description: Internal Server Error
      tags:
      - webhook
      x-eov-operation-handler: controllers/WebhookController
  /webhooks/{subscriptionID}:
    delete:
      description: unsubscribes a client from the specified event
      operationId: webhooksSubscriptionIDDELETE
      parameters:
      - description: The unique identifier of the subscription you want to unsubscribe
          from
        explode: false
        in: path
        name: subscriptionID
        required: true
        schema:
          example: 2531329f-fb09-4ef7-887e-84e648214436
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Subscription successfully deleted
        "404":
          content: {}
          description: Subscription not found
        "500":
          content: {}
          description: Internal Server Error
      tags:
      - webhook
      x-eov-operation-handler: controllers/WebhookController
  /webhooks:
    get:
      description: show all subscriptions
      operationId: webhooksGET
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of Subscriptions
        "500":
          content: {}
          description: Internal Server Error
      tags:
      - webhook
      x-eov-operation-handler: controllers/WebhookController
  /signatures/{referenceID}:
    put:
      description: store a signature for the document identified by its referenceID
        on the ledger
      operationId: uploadSignature
      parameters:
      - description: The referenceID of the document
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSignature'
        description: a document signature that should be uploaded
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Successful operation, returns transaction hash
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /signatures/{referenceID}/{signer}:
    get:
      description: Fetch all signatures for a given referenceID and a signer from
        the ledger
      operationId: fetchSignatures
      parameters:
      - description: The referenceID of the document
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      - description: The signers MSP name
        explode: false
        in: path
        name: signer
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          description: Successful operation, returns json of signatures
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /signatures/{referenceID}/verify/{creator}/{signer}:
    get:
      description: Fetch all signatures for a given reference id, creator and signer
        from the ledger and verify the content against the on chain referencepayload
        link
      operationId: verifySignatures
      parameters:
      - description: The referenceID
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      - description: The initial creator of the contract that was signed. This also
          verifies the origin on chain.
        explode: false
        in: path
        name: creator
        required: true
        schema:
          type: string
        style: simple
      - description: The signer
        explode: false
        in: path
        name: signer
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          description: Successful operation, returns json of verified signatures
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /config/offchain-db:
    get:
      description: Read back the configuration of the offchain-db
      operationId: getOffchainDBConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffchainDBConfig'
          description: The current configuration for the offchain-db
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - config
      x-eov-operation-handler: controllers/ConfigController
    put:
      description: Update the configuration of the offchain-db
      operationId: setOffchainDBConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffchainDBConfig'
        description: A configuration for the offchain-db
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          description: Successful operation, returns transaction hash
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - config
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ConfigController
  /config/certificates/root:
    put:
      description: Upload a root certificate
      operationId: setCertificateRoot
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: BUGBUG openapi does not like string bodies?! Use json
                  array for now
                example: '["-----BEGIN CERTIFICATE-----..."]'
                type: string
              type: array
        description: Set the signature root certificate.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          description: Successful operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode'
          description: Internal Error
      tags:
      - config
      x-eov-operation-handler: controllers/ConfigController
components:
  schemas:
    PrivateDocument:
      example:
        payload: payload
        toMSP: toMSP
      properties:
        toMSP:
          description: The partner MSP that is also involved
          type: string
        payload:
          description: A base64 encoded payload
          type: string
      required:
      - payload
      - toMSP
      title: PrivateDocument
      type: object
    PrivateDocumentResponse:
      allOf:
      - $ref: '#/components/schemas/PrivateDocument'
      example:
        fromMSP: fromMSP
        payloadHash: payloadHash
        blockchainRef:
          txId: txId
          type: type
          timestamp: timestamp
        referenceID: referenceID
      properties:
        fromMSP:
          description: The MSP that creates this document (optional on request)
          type: string
        payloadHash:
          description: The hash over the document
          type: string
        blockchainRef:
          $ref: '#/components/schemas/BlockchainRef'
        referenceID:
          description: The referenceID of the document that was added
          type: string
      required:
      - blockchainRef
      - fromMSP
      - payloadHash
      - referenceID
      title: PrivateDocumentResponse
      type: object
    ErrorCode:
      properties:
        code:
          description: The error code. See chaincode/hybrid/errorcodes/errors.go for
            a list
          enum:
          - ERROR_NON_LOCAL_ACCESS_DENIED
          - ERROR_OFFCHAIN_DB_CONFIG
          - ERROR_INTERNAL
          - ERROR_DOCUMENT_ID_EXISTS
          - ERROR_DOCUMENT_ID_INVALID
          - ERROR_DOCUMENT_ID_UNKNOWN
          - ERROR_TARGET_MSP_INVALID
          - ERROR_CERT_INVALID
          - ERROR_SIGNATURE_INVALID
          - ERROR_BAD_JSON
          - ERROR_HASH_MISMATCH
          type: string
        message:
          description: The description of the error
          type: string
      required:
      - code
      - message
      title: ErrorCode
      type: object
    SubscriptionRequest:
      example:
        eventName: STORE:SIGNATURE
        callbackUrl: https://myapp.local
      properties:
        eventName:
          description: The Event name
          enum:
          - STORE:SIGNATURE
          - STORE:PAYLOADLINK
          type: string
        callbackUrl:
          description: The location where data will be sent
          example: https://myapp.local
          format: uri
          type: string
      required:
      - callbackUrl
      - eventName
      title: Subscription
      type: object
    SubscriptionPayload:
      example:
        data: data
        eventName: eventName
        msp: msp
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        timestamp:
          description: The timestamp when the tx was created on the ledger (RFC3339)
          format: date-time
          type: string
        eventName:
          description: The Event name
          type: string
        msp:
          description: The MSP that triggered the event
          type: string
        data:
          description: The data payload
          type: string
      required:
      - data
      - eventName
      - msp
      - timestamp
      title: SubscriptionPayload
      type: object
    DocumentSignature:
      example:
        signature: signature
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIICYjCCAemgAwIBA...
        algorithm: secp384r1
      properties:
        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
      required:
      - algorithm
      - certificate
      - signature
      title: DocumentSignature
      type: object
    OffchainDBConfig:
      example:
        URI: http://user:password@localhost:5984/
      properties:
        URI:
          description: URL of the offchain db (couchdb)
          example: http://user:password@localhost:5984/
          format: uri
          type: string
      required:
      - URI
      title: OffchainDBConfig
      type: object
    BlockchainRef:
      example:
        txId: txId
        type: type
        timestamp: timestamp
      properties:
        type:
          description: The tyoe of the blockchain, for now this is hlf
          type: string
        txId:
          description: The transaction id as stored on the ledger
          type: string
        timestamp:
          description: The timestamp when the document was committed RFC3339
          type: string
      required:
      - timestamp
      - txId
      - type
      title: BlockchainRef
      type: object
